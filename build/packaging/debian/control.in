Source: condor
#if defined(UW_BUILD)
Maintainer: HTCondor Developers <htcondor-debian@cs.wisc.edu>
#else
Maintainer: Debian HPC Team <debian-hpc@lists.debian.org>
#endif
Uploaders: Tim Theisen <tim@cs.wisc.edu>
Section: science
Priority: optional
Build-Depends: cmake (>= 3.16),
               debhelper,
#if defined(FOCAL)
               debhelper-compat (= 12),
#else
               debhelper-compat (= 13),
#endif
#if ! defined(PPC64LE)
               default-jdk,
#endif
               dh-python,
               libboost-filesystem-dev,
               libboost-program-options-dev,
               libboost-python-dev,
               libboost-regex-dev,
               libboost-system-dev,
               libboost-test-dev,
               libboost-thread-dev,
               libcgroup-dev,
               libcurl4-openssl-dev,
               libkrb5-dev,
               libldap2-dev | libldap-dev,
               libmunge-dev,
               libpam0g-dev,
               libpcre2-dev,
               libpq-dev,
               libscitokens-dev,
               libssl-dev,
               libsqlite3-dev,
               libsystemd-dev,
               libvirt-dev,
               libx11-dev,
               libxss-dev,
               python3-dev,
               python3-setuptools,
               python3-sphinx,
               python3-sphinx-rtd-theme,
#if !defined(BULLSEYE)
               python3-nbsphinx,
               python3-sphinx-autodoc-typehints,
#endif
               uuid-dev,
               voms-dev,
               zlib1g-dev
Build-Conflicts: liblog4cpp5-dev
Standards-Version: 4.6.2
#if defined(UW_BUILD)
Vcs-Browser: https://github.com/htcondor/htcondor
Vcs-Git: https://github.com/htcondor/htcondor.git
#else
Vcs-Browser: https://salsa.debian.org/hpc-team/condor
Vcs-Git: https://salsa.debian.org/hpc-team/condor.git
#endif
Homepage: https://htcondor.org/
Rules-Requires-Root: no

Package: condor
Architecture: any
Depends: adduser,
         libdate-manip-perl,
         python3,
         python3-cryptography,
         python3-requests,
         libcom-err2,
         libgssapi-krb5-2,
         libk5crypto3,
         libkrb5-3,
         libkrb5support0,
         libmunge2,
         net-tools,
         cryptsetup,
#if defined(UW_BUILD)
         pelican (>= 7.18.0),
         pelican-osdf-compat (>= 7.18.0),
#endif
         libjs-bootstrap,
         libjs-jquery,
         jq,
         ${lib:Depends},
         ${misc:Depends},
         ${perl:Depends},
         ${python3:Depends},
         ${shlibs:Depends}
Recommends: bash-completion,
            openssh-server
Suggests: docker.io,
          coop-computing-tools,
          singularity-container,
          slurm-client
Conflicts: htcondor,
           condor-upgrade-checks
Breaks: htcondor,
        condor-upgrade-checks
Replaces: htcondor,
          condor-upgrade-checks
Description: distributed workload management system
 Like other full-featured batch systems, HTCondor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to HTCondor;
 HTCondor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing systems, HTCondor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. HTCondor
 does not require a shared file system across machines - if no shared file
 system is available, HTCondor can transfer the job's data files on behalf of
 the user.
 .
 This package can set up an appropriate initial configuration at install
 time for a machine intended either as a member of an existing HTCondor pool
 or as a "Personal" (single machine) HTCondor pool.

Package: condor-dev
Architecture: any
Section: libdevel
Depends: ${misc:Depends},
         ${shlibs:Depends}
Conflicts: htcondor-dev
Breaks: htcondor-dev
Replaces: htcondor-dev
Description: distributed workload management system - development files
 Like other full-featured batch systems, HTCondor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to HTCondor;
 HTCondor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing systems, HTCondor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. HTCondor
 does not require a shared file system across machines - if no shared file
 system is available, HTCondor can transfer the job's data files on behalf of
 the user.
 .
 This package provides headers and libraries for development of HTCondor
 add-ons.

Package: condor-doc
Architecture: all
Section: doc
Depends: ${misc:Depends}
Conflicts: htcondor-doc
Breaks: htcondor-doc
Replaces: htcondor-doc
Description: distributed workload management system - documentation
 Like other full-featured batch systems, HTCondor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to HTCondor;
 HTCondor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing systems, HTCondor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. HTCondor
 does not require a shared file system across machines - if no shared file
 system is available, HTCondor can transfer the job's data files on behalf of
 the user.
 .
 This package provides HTCondor's documentation in HTML and PDF format, as well
 as configuration and other examples.

Package: minicondor
Architecture: any
Section: science
Depends: condor (= ${binary:Version}),
         ${misc:Depends}
Conflicts: minihtcondor
Breaks: minihtcondor
Replaces: minihtcondor
Description: distributed workload management system - single node configuration
 Like other full-featured batch systems, HTCondor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to HTCondor;
 HTCondor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing systems, HTCondor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. HTCondor
 does not require a shared file system across machines - if no shared file
 system is available, HTCondor can transfer the job's data files on behalf of
 the user.
 .
 This package provides an example configuration is good for trying out HTCondor
 for the first time. It only configures the IPv4 loopback address, turns on
 basic security, and shortens many timers to be more responsive.

Package: condor-ap
Architecture: any
Section: science
Depends: condor (= ${binary:Version}),
         ${misc:Depends}
Description: distributed workload management system - single node configuration
 Like other full-featured batch systems, HTCondor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to HTCondor;
 HTCondor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing systems, HTCondor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. HTCondor
 does not require a shared file system across machines - if no shared file
 system is available, HTCondor can transfer the job's data files on behalf of
 the user.
 .
 This example configuration is good for installing an Access Point.
 After installation, one could join a pool or start an annex.

Package: condor-ep
Architecture: any
Section: science
Depends: condor (= ${binary:Version}),
         ${misc:Depends}
Description: distributed workload management system - single node configuration
 Like other full-featured batch systems, HTCondor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to HTCondor;
 HTCondor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing systems, HTCondor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. HTCondor
 does not require a shared file system across machines - if no shared file
 system is available, HTCondor can transfer the job's data files on behalf of
 the user.
 .
 This example configuration is good for installing an Execution Point.
 After installation, one could join a pool or start an annex.

Package: condor-annex-ec2
Architecture: any
Section: science
Depends: condor (= ${binary:Version}),
         ${misc:Depends}
Conflicts: htcondor-annex-ec2
Breaks: htcondor-annex-ec2
Replaces: htcondor-annex-ec2
Description: distributed workload management system - single node configuration
 Like other full-featured batch systems, HTCondor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to HTCondor;
 HTCondor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing systems, HTCondor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. HTCondor
 does not require a shared file system across machines - if no shared file
 system is available, HTCondor can transfer the job's data files on behalf of
 the user.
 .
 This package provides configuration and script to make an EC2 image
 annex-compatible.  Do NOT install on a non-EC2 image.

#if defined(UW_BUILD)
Package: condor-tarball
Architecture: any
Section: science
Depends: condor (= ${binary:Version}),
         ${misc:Depends}
Conflicts: htcondor-tarball
Breaks: htcondor-tarball
Replaces: htcondor-tarball
Description: distributed workload management system - single node configuration
 Like other full-featured batch systems, HTCondor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to HTCondor;
 HTCondor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing systems, HTCondor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. HTCondor
 does not require a shared file system across machines - if no shared file
 system is available, HTCondor can transfer the job's data files on behalf of
 the user.
 .
 This package provides files needed to create a stand-alone HTCondor tarball.
#endif

Package: condor-kbdd
Architecture: any
Section: science
Depends: condor (= ${binary:Version}),
         ${misc:Depends},
         ${shlibs:Depends}
Description: distributed workload management system - single node configuration
 Like other full-featured batch systems, HTCondor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to HTCondor;
 HTCondor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing systems, HTCondor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. HTCondor
 does not require a shared file system across machines - if no shared file
 system is available, HTCondor can transfer the job's data files on behalf of
 the user.
 .
 The condor_kbdd monitors logged in X users for activity. It is only
 useful on systems where no device (e.g. /dev/*) can be used to
 determine console idle time.


Package: condor-vm-gahp
Architecture: any
Section: science
Depends: condor (= ${binary:Version}),
         libvirt0,
         ${misc:Depends},
         ${shlibs:Depends}
Description: distributed workload management system - single node configuration
 Like other full-featured batch systems, HTCondor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to HTCondor;
 HTCondor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing systems, HTCondor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. HTCondor
 does not require a shared file system across machines - if no shared file
 system is available, HTCondor can transfer the job's data files on behalf of
 the user.
 .
 The condor_vm-gahp enables the Virtual Machine Universe feature of
 HTCondor. The VM Universe uses libvirt to start and control VMs under
 HTCondor's Startd.

Package: condor-test
Architecture: any
Section: science
Depends: condor (= ${binary:Version}),
         ${misc:Depends},
         ${shlibs:Depends}
Conflicts: htcondor-test
Breaks: htcondor-test
Replaces: htcondor-test
Description: distributed workload management system - single node configuration
 Like other full-featured batch systems, HTCondor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to HTCondor;
 HTCondor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing systems, HTCondor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. HTCondor
 does not require a shared file system across machines - if no shared file
 system is available, HTCondor can transfer the job's data files on behalf of
 the user.
 .
#if defined(UW_BUILD)
 This package provides files needed to run tests against the extracted tarball
 in the BaTLab.
#else
 This package provides a few miscellaneous test scripts.
#endif

