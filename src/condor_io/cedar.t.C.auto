/***************************************************************
 *
 * Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
 * University of Wisconsin-Madison, WI.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ***************************************************************/

#include "condor_common.h"

#include "condor_config.h"
#include "condor_network.h"
#include "condor_io.h"
#include "condor_debug.h"
#include "test.h"

#include <stdio.h>
#include <iostream>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>

int main()
{
	SafeSock mySock;
	int op, result;

	cout << "(1) Server" << endl;
	cout << "(2) Client" << endl;
	cout << "(9) Exit" << endl;
	cout << "Select: ";
	cin >> op;

	// my_ip_addr() is obsolete
	//cout << "I am " << my_ip_addr() << endl;
	mySock.assign(CP_IPV4);
	result = mySock.set_os_buffers(3000000, false);
	cout << "buffer size set to " << result << endl;
	switch(op) {
		case 1: // Server
			char server_c;
			unsigned char server_uc;
			int server_integer;
			unsigned int server_uinteger;
			long server_lint;
			unsigned long server_ulint;
			short server_sint;
			unsigned short server_usint;
			float server_f;
			char *server_str;
			int server_len;

			result = mySock.bind(SERVER_PORT);
			if(result != TRUE) {
				cout << "Bind failed\n";
				exit(-1);
			}
			cout << "Bound to [" << SERVER_PORT << "]\n";
			while(true) {
				mySock.decode();

				mySock.code(server_c);
				//cout << "Recv Char: " << c << endl;

				mySock.code(server_uc);
				//cout << "Recv U_Char: " << uc << endl;

				mySock.code(server_integer);
				//cout << "Recved int: " << integer << endl;

				mySock.code(server_uinteger);
				//cout << "Received U_int: " << uinteger << endl;

				mySock.code(server_lint);
				//cout << "Recved int: " << lint << endl;

				mySock.code(server_ulint);
				//cout << ulint << endl;
				//cout << "Received U_lint: " << ulint << endl;

				mySock.code(server_sint);
				//cout << sint << endl;

				mySock.code(server_usint);
				//cout << usint << endl;
				/* =======
				======== */

				mySock.code(server_f);
				//cout << f << endl;

				/* +++++++++++++
				mySock.code(d);
				++++++++++++++*/

				server_str = NULL;
				mySock.code(server_str);

				free(server_str);
				server_str = NULL;
				mySock.code(server_str, server_len);
				cout << "received server_str[" << server_len << "]\n";

				mySock.end_of_message();
				cout << "\n\n\nEchoing message\n";

				mySock.encode();

				mySock.code(server_c);

				mySock.code(server_uc);

				mySock.code(server_integer);

				mySock.code(server_uinteger);

				mySock.code(server_lint);

				mySock.code(server_ulint);

				mySock.code(server_sint);

				mySock.code(server_usint);
				/* ========
				=======*/

				mySock.code(server_f);

				/*+++++++++++
				mySock.code(d);
				++++++++++++*/
				mySock.code(server_str);

				mySock.code(server_str, server_len);

				mySock.end_of_message();
			}
			break;



		case 2: // Client
			char old_c, new_c;
			unsigned char old_uc, new_uc;
			int old_integer, new_integer;
			unsigned int old_uinteger, new_uinteger;
			long old_lint, new_lint;
			unsigned long old_ulint, new_ulint;
			short old_sint, new_sint;
			unsigned short old_usint, new_usint;
			float old_f, new_f;
			char *old_str, *new_str;
			int client_len, size;

			char serverName[30];

			// Connect to the server
			cout << "Server: ";
			cin >> serverName;
			result = mySock.connect(serverName, SERVER_PORT);
			if(result != TRUE) {
				cout << "Connection failed\n";
				exit(-1);
			}
			cout << "Connected to [" << serverName<< ", " << SERVER_PORT << "]\n";
			mySock.timeout(2);

			while(true) {
				cout << endl << endl << endl;
				mySock.encode();

				old_c = get_random_int() % 256;
				mySock.code(old_c);
				//cout << "Sent char: " << oc << endl;

				old_uc = get_random_int() % 256;
				mySock.code(old_uc);
				//cout << "Send U_Char: " << ouc << endl;

				old_integer = get_random_int();
				mySock.code(old_integer);
				//cout << "Sent int: " << ointeger << endl;

				old_uinteger = get_random_int();
				mySock.code(old_uinteger);
				//cout << "Sent U_int: " << ouinteger << endl;

				old_lint = get_random_int();
				mySock.code(old_lint);
				//cout << "Sent long: " << olint << endl;

				old_ulint = get_random_int();
				mySock.code(old_ulint);
				//cout << "Sent U_long: " << oulint << endl;

				old_sint = get_random_int();
				mySock.code(old_sint);
				//cout << osint << endl;

				old_usint = get_random_int();
				mySock.code(old_usint);
				//cout << ousint << endl;

				old_f = (float)get_random_int();
				mySock.code(old_f);
				//cout << of << endl;

				/*+++++++++++++++++
				old_d = (double)get_random_int();
				mySock.code(old_d);
				+++++++++++++*/

				size = (unsigned int)get_random_int() % 90000;
				if(size == 0) size = 100;
				old_str = (char *)malloc(size);
				if(!old_str) {
					cout << "out of memory\n"; exit(-1);
				}
				for(int i=0; i<size-1; i++)
					old_str[i] = ((unsigned int)get_random_int() % 95) + 33;
				old_str[size-1] = '\0';
				mySock.code(old_str);
				mySock.code(old_str, size);

				mySock.end_of_message();

				new_str = (char *)malloc(size);
				if(!new_str) {
					cout << "out of memory\n"; exit(-1);
				}
				mySock.decode();

				if(mySock.code(new_c) == FALSE)
					continue;
				//cout << "Echoed char: " << c << endl;
				if(new_c != old_c) {
					cout << "\t\t\t\t==============>char echo fail\n";
					//exit(-1);
				}
				if(mySock.code(new_uc) == FALSE)
					continue;
				//cout << "Echoed U_Char: " << uc << endl;
				if(new_uc != old_uc) {
					cout << "\t\t\t\t==============>unsigned char echo fail\n";
					//exit(-1);
				}

				if(mySock.code(new_integer) == FALSE)
					continue;
				if(new_integer != old_integer) {
					cout << "\t\t\t\t==============>integer echo fail\n";
					//exit(-1);
				}
				if(mySock.code(new_uinteger) == FALSE)
					continue;
				if(new_uinteger != old_uinteger) {
					cout << "\t\t\t\t==============>unsigned integer echo fail\n";
					//exit(-1);
				}

				if(mySock.code(new_lint) == FALSE)
					continue;
				if(new_lint != old_lint) {
					cout << "\t\t\t\t==============>long echo fail\n";
					//exit(-1);
				}
				if(mySock.code(new_ulint) == FALSE)
					continue;
				if(new_ulint != old_ulint) {
					cout << "\t\t\t\t==============>unsigned long echo fail\n";
					//exit(-1);
				}

				if(mySock.code(new_sint) == FALSE)
					continue;
				if(new_sint != old_sint) {
					cout << "\t\t\t\t==============>short echo fail\n";
					//exit(-1);
				}
				if(mySock.code(new_usint) == FALSE)
					continue;
				if(new_usint != old_usint) {
					cout << "\t\t\t\t==============>unsigned short echo fail\n";
					//exit(-1);
				}
				/* ======
				=====*/

				if(mySock.code(new_f) == FALSE)
					continue;
				if(new_f != old_f) {
					cout << "\t\t\t\t==============>float echo fail\n";
					//exit(-1);
				}

				/* +++++++++
				mySock.code(d);
				if(d != od) {
					cout << "double echo fail\n";
					cout << "(sent)double = " << od << endl;
					cout << "double = " << d << endl;
					exit(-1);
				}
				+++++++++++*/

				if(mySock.code(new_str) == FALSE)
					continue;
				if(strcmp(new_str, old_str)) {
					cout << "\t\t\t\t==============>str echo fail\n";
					//exit(-1);
				}
				if(mySock.code(new_str, client_len) == FALSE)
					continue;
				if(client_len != size || strcmp(new_str, old_str)) {
					cout << "\t\t\t\t==============>2nd str echo fail\n";
					cout << "size sent = " << size << endl;
					cout << "len received = " << client_len << endl;
					//exit(-1);
				}
				mySock.end_of_message();
				free(old_str);
				free(new_str);
				old_str = NULL;
				new_str = NULL;
				cout << "Echo success!!!!\n";
				cout << endl << endl << endl;
				//sleep(1);
			} // of while(true)

		case 9:
			exit(0);

		default:
			break;
	}
}
