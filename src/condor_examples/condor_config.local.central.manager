######################################################################
##
##  condor_config.local.central.manager
##
##  This is the default local configuration file for your central
##  manager machine.  You should copy this file to the appropriate
##  location and customize it for your needs.  The file is divided
##  into three main parts: Local settings of your own, settings you
##  may want to customize and settings you should probably leave alone
##  (unless you know what you're doing).
##
##  Unless otherwise specified, settings that are commented out show
##  the defaults that are used if you don't define a value.  Settings
##  that are defined here MUST BE DEFINED since they have no default
##  value.
##
######################################################################

######################################################################
######################################################################
##  Local settings 
######################################################################
######################################################################

##  Place your own local configuration settings for your central
##  manager here.




######################################################################
######################################################################
##  Settings you may want to customize: 
##  (it is generally safe to leave these untouched) 
######################################################################
######################################################################

##  Every pool can have a name associated with it.  This should be a
##  short description (20 characters or so) that describes your site.
##  For example, the name for the UW-Madison Computer Science Condor
##  Pool is: "UW-Madison CS" (you don't need to put in the " marks).
#COLLECTOR_NAME		= Short Description of your pool

##  What daemons do you want to run on your central manager?  
##  NOTE: For it to be the central manager, you need the NEGOTIATOR
##  and COLLECTOR to run.  It's optional whether or not you want to
##  run the schedd (to allow jobs to be submited) and/or the startd
##  (to allow Condor jobs to execute) on your central manager.
DAEMON_LIST   = MASTER, COLLECTOR, NEGOTIATOR, STARTD, SCHEDD

##  Where are the binaries for these daemons?  (Note: MASTER, SCHEDD,
##  and STARTD are already defined in the global config file).
COLLECTOR     = $(SBIN)/condor_collector
NEGOTIATOR    = $(SBIN)/condor_negotiator


######################################################################
######################################################################
##  Settings you should probably leave alone:
##  (unless you know what you're doing)
######################################################################
######################################################################

##--------------------------------------------------------------------
##  condor_collector
##--------------------------------------------------------------------
##  How long can a ClassAd remain in the collector before it is
##  discarded as stale information?  (Defaults to 15 minutes.  The 
##  daemons send updates every 5 minutes by default).
#CLASSAD_LIFETIME	= 900

##  How often should the collector check for machines that don't have
##  ClassAds from the condor_master and send email about it? (3
##  hours by default).
#MASTER_CHECK_INTERVAL	= 10800

##  Network timeout when talking to daemons that are sending an
##  update: 
#CLIENT_TIMEOUT		= 30

##  Network timeout when talking to anyone doing a query:
#QUERY_TIMEOUT		= 60

##  Enable history logging in the collector
#KEEP_POOL_HISTORY = False

##  This is the directory where historical data will be stored.  There
##  is a limit to the maximum space required for the files created by
##  the CondorView server (see below).  This directory must be
##  writable by whatever user the collector is running as
##  (usually "condor").  Note: This should be a separate directory,
##  not the same as either the SPOOL or LOG directories you have
##  already setup for Condor.  There are a few problems putting these
##  files into either of those directories.
#POOL_HISTORY_DIR = $(LOCAL_DIR)/ViewHist

##  The maximum combined size of the history files
#POOL_HISTORY_MAX_STORAGE = 10000000

##  The interval (in seconds) between samples for history logging
#POOL_HISTORY_SAMPLING_INTERVAL = 60

##  If your pool requires TCP updates to the collector (and you
##  defined "UPDATE_COLLECTOR_WITH_TCP = True", you need to enable a
##  "socket cache" so that the collector keeps the TCP sockets used
##  for updates open.  This vastly improves performance.  Each daemon
##  will have 1 socket open to the collector, so if you have N
##  machines in your pool, all of them running a master, schedd, and
##  startd, you'd want a socket cache that has at least 3*N entries.
##  If you have machines with "personal Condor" added to your pool,
##  you'll need another 2 entries (the master and schedd) for each
##  one.  Each entry in this cache uses another file descriptor in the
##  collector, so be careful not to use more of those than your system
##  allocates for a single process.  If you do not enable a socket
##  cache, TCP updates will be refused by the collector.
#COLLECTOR_SOCKET_CACHE_SIZE = 300

## Turn on update statistics in the collector.  These fields cause the
## collector to gather and publish some statistics about lost UDP
## updates.  All updates that are sent to the collector will be
## stamped with a sequence number that the collector can use to detect
## that previous updates have been missed.  Setting
## "COLLECTOR_DAEMON_STATS = True" enables the collector to publish
## UpdatesTotal, UpdatesSquenced and UpdatesLost fields into each ClassAd
## that it receives and sends out.  To turn these off, set this value
## to False.
#COLLECTOR_DAEMON_STATS		= True

## This is related to COLLECTOR_DAEMON_STATS.  If
## COLLECTOR_DAEMON_HISTORY_SIZE is non-zero, the collector will also
## publish an UpdatesHistory into each ClassAd the it receives and sends
## out.  The collector will keep track, for each of the past
## COLLECTOR_DAEMON_HISTORY_SIZE updates, whether that update was lost
## or not.  UpdatesHistory is a hex string which represents this history.
## The hex string is long enough to accomodate the specified number of
## updates, and is initally filled with zeros.  For each update, a logical
## "one" bit represents a lost update, and a zero is a successful update.
## The most significant bit represents the most recent update, with the
## value shifted right with each new update.  Thus, UpdatesHistory = "0x40"
## would be the history for the last 8 updates, with the second most recent
## update marked as lost, and all others successful.  If the next updates
## are all successful, the values published, after each update, would be:
## 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00.  Setting
## COLLECTOR_DAEMON_HISTORY_SIZE = 0 will disable this feature.
#COLLECTOR_DAEMON_HISTORY_SIZE	= 128

## COLLECTOR_CLASS_HISTORY_SIZE turns on "per daemon" stats that can
## be queried with "condor_status -collector -l".  This enables the
## collector to publish overall history about all updates of a given
## "class" (i.e.  "Start" would represent the history of all of the most
## recent Machine ads).  Setting COLLECTOR_CLASS_HISTORY_SIZE = 0 will
## disable this feature.
#COLLECTOR_CLASS_HISTORY_SIZE	= 1024

## Setting COLLECTOR_QUERY_WORKERS to any non-zero value enables
## the collector to fork off a separate worker process for each
## query request.  Up to COLLECTOR_QUERY_WORKERS worker processes
## will be created in this way.  If more than these are already running
## and another query arrives, it will be queued until a worker completes.
## Fork workers are available for UNIX systems only, and this setting
## is ingored in all others (Windows).
COLLECTOR_QUERY_WORKERS	= 4


##--------------------------------------------------------------------
##  condor_negotiator
##--------------------------------------------------------------------
##  How often should the negotiator start a negotiation cycle?
#NEGOTIATOR_INTERVAL	= 300

##  What timeout should the negotiator use on it's network connections
##  to the schedds and startds?
#NEGOTIATOR_TIMEOUT	= 30

##  What is the half-life of the user priorities? (1 day)
#PRIORITY_HALFLIFE	= 86400

##  The default priority factor for nice users
#NICE_USER_PRIO_FACTOR = 10000000

##  Maximum size of the accountant database file
#MAX_ACCOUNTANT_DATABASE_SIZE = 1000000

##  The UID_DOMAIN of users who are considered local.  If undefined,
##  all users are considered local.  Remote (non-local) users get a
##  configurable boost to their priority value (giving them worse
##  priority in your pool).  See below.
#ACCOUNTANT_LOCAL_DOMAIN = $(UID_DOMAIN)

##  The default priority factor for remote users (only used if
##  ACCOUNTANT_LOCAL_DOMAIN is defined above).
#REMOTE_PRIO_FACTOR = 10000

##  The NEGOTIATOR_SOCKET_CACHE_SIZE macro defines the maximum number
##  of sockets which the negotiator should keep in its open socket
##  cache.  Caching open sockets makes the negotiation protocol more
##  efficient by eliminating the need for socket connection
##  establishment for each negotiation cycle.  The default is
##  currently 16.  To be effective, this parameter should be set to a
##  value greater than the number of schedds submitting jobs to the
##  negotiator at any time.
#NEGOTIATOR_SOCKET_CACHE_SIZE = 16

##  Boolean setting to control if the negotiator should inform each
##  startd (via UDP) when the startd has been matched with a job.
#NEGOTIATOR_INFORM_STARTD = TRUE
