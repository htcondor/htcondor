#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;

use Cwd;


my $topleveldir = getcwd();

$param_template = "x_param.protocol-gsi.template";
$testdesc =  'lib_auth_protocol-gsi - Security Protocol GSI Authentication Test';
$testname = "lib_auth_protocol-gsi";
$corename = "lib_auth_protocol-gsi";
$mycustomconfig = "x_secgsi_configpostsrc";
$mytestnegotiation = "x_secneg_clR_dmnR_secprepostsrc";
$mytestnegotiation_result = "yes";
$mycmdfile = "lib_auth_protocol-gsi.cmd";
$mygsicerts = "x_lib_auth-gsi_keys.tgz";

$mycafile = "gsi_keys/certificates";
$mycadir = "gsi_keys";
$mycertfile = "gsi_keys/hostcert.pem";
$mykeyfile = "gsi_keys/hostkey.pem";
$myx509certdir = "gsi_keys/certificates";

# where am I running
$currenthost = CondorTest::getFqdnHost();

print scalar localtime() . "\n";

$pid = $$;
$mypid = $pid;

$pidleveldir = $topleveldir . "/" . $mypid;
system("mkdir -p $pidleveldir");
chdir("$pidleveldir");
system("tar -zxvf ../$mygsicerts");
system("pwd;ls");
# while here edit user into the mapfile
# change USERNAME to actual user in grid mapfile
my $usernm = `whoami`;
CondorUtils::fullchomp($usernm);

$mygridmap = "gsi_keys/mapfiles/grid-mapfile";
$mygridmapnew = "gsi_keys/mapfiles/grid-mapfile.new";
$mygridmapold = "gsi_keys/mapfiles/grid-mapfile.old";
open(MAP,"<$mygridmap") or die "Failed to open:  $mygridmap:$!\n";
open(MAPN,">$mygridmapnew") or die "Failed to open:  $mygridmapnew:$!\n";

my $line = "";
while (<MAP>) {
	CondorUtils::fullchomp($_);
	$line = $_;
	if($line =~ /^(.*)USERNAME$/) {
		print MAPN "$1$usernm\n";
	} else {
		print MAPN "$line\n";
	}
}
close(MAP);
close(MAPN);
system("mv $mygridmap $mygridmapold");
system("mv $mygridmapnew $mygridmap");

chdir("$topleveldir");

$myvariation = 1;

$mypid = $$;
$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

#print "$line\n";
$myparamname = $corename . $mypid . ".param";
$mysubmitnm = $corename . $mypid . ".cmd";
$mysubmitnmout = $corename . $mypid . ".cmd.out";
$mysubmitnmlog = $corename . $mypid . ".log";
$mysubmitnmout = $corename . $mypid . ".log";
$mycorenm = $corename . ".cmd";
$mycorenmout = $corename . ".cmd.out";
$mycorenmlog = $corename . ".log";

CondorTest::debug("Master PID is $mypid\n",1);
CondorTest::debug("Master PID submit file is $mysubmitnm\n",1);

# Edit submit file to submit to scheduler at securitypool (side b) schedd.
my $line;
open(CSUB,">$myparamname") || die "Can't open new submit file $myparamname: $!\n";
open(TPLATE,"<$param_template") || die "Can't open param template $param_template: $!\n";
while(<TPLATE>)
{
	CondorUtils::fullchomp($_);
	$line = $_;
	if( $line =~ /^\s*secprepostsrc\s*=\s*.*$/ )
	{
		CondorTest::debug("Setting up for $mytestnegotiation\n",1);
		print CSUB "secprepostsrc = $mytestnegotiation\n";
	}
	else
	{
		CondorTest::debug("template: $line\n",1);
		print CSUB "$line\n";
	}
}
close(TPLATE);
close(CSUB);
sleep 10;

my $configtemplate = $mycustomconfig . ".template";
open(CONFIG,">$mycustomconfig") || die "Can't open new postconfig file $mycustomconfig: $!\n";
open(CONFIGTPLATE,"<$configtemplate") || die "Can't open postconfig template $configtemplate: $!\n";
while(<CONFIGTPLATE>)
{
	$tmp = "";
	CondorUtils::fullchomp($_);
	$line = $_;
	if($line =~ /^GSI_DAEMON_CERT\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "GSI_DAEMON_CERT = $tmp\n";
	} elsif($line =~ /^GSI_DAEMON_KEY\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "GSI_DAEMON_KEY = $tmp\n";
	} elsif($line =~ /^GSI_DAEMON_TRUSTED_CA_DIR\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "GSI_DAEMON_TRUSTED_CA_DIR = $tmp\n";
	} elsif($line =~ /^GSI_DAEMON_DIRECTORY\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "GSI_DAEMON_DIRECTORY = $tmp\n";
	} elsif($line =~ /^GRIDMAP\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "GRIDMAP = $tmp\n";
	} elsif($line =~ /^X509_CERT_DIR\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "X509_CERT_DIR = $tmp\n";
		$ENV{X509_CERT_DIR} = $tmp;
		CondorTest::debug("Set $ENV{X509_CERT_DIR} into the environment\n",1);
	} elsif($line =~ /^X509_USER_PROXY\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "X509_USER_PROXY = $tmp\n";
		$ENV{X509_USER_PROXY} = $tmp;
		CondorTest::debug("Set $ENV{X509_USER_PROXY} into the environment\n",1);
	} else {
		print CONFIG "$line\n";
	}

}
close(CONFIG);
close(CONFIGTPLATE);

my $configsec = CondorTest::StartPersonal( "lib_auth_protocol-gsi", $myparamname ,"protocol", $mypid, "donotwait");
my @securitypool = split /\+/, $configsec;
my $secconfig = shift @securitypool;
my $secport = shift @securitypool;

print "\n\n";
print "****************************************************************\n";
print "****************************************************************\n\n";
# Get proxy life 
my @proxypath = `condor_config_val X509_USER_PROXY`;
CondorUtils::fullchomp($proxypath[0]);
my $pathtoproxy = $proxypath[0];
#print "Proxy for test is here: $pathtoproxy and is good ";
print "Proxy Validity: ";
system("openssl x509 -enddate -in $pathtoproxy -noout");

#openssl x509 -enddate -in hostcert.pem  -noout

# Get cert life
my @certpath = `condor_config_val GSI_DAEMON_CERT`;
CondorUtils::fullchomp($certpath[0]);
my $pathtocert = $certpath[0];
#print "Certificate for test is here: $pathtocert and is good ";
print "Certificate Validity: ";
system("openssl x509 -enddate -in $pathtocert -noout");

print "\n****************************************************************\n";
print "****************************************************************\n";
print "\n\n";


#sleep(45);

CondorTest::debug("---security config is $secconfig and securitypool port is $secport---\n",1);
	

$ENV{CONDOR_CONFIG} = $secconfig;
# submit into local schedd (side a)

# are we running yet? Scrap master log for all expected daemons
my $upnow = HaveAllReportedIn(40, $secconfig);

if($upnow == 1) {
	CondorTest::KillPersonal($secconfig);
	exit(1);
}

my $result = system("./x_lib_auth_protocol.pl $mypid \"protocol\" $mytestnegotiation_result $mycmdfile \"gsi\"");
CondorTest::debug("Result of crafted lib_auth_protocol job is  $result\n",1);

system("cp *$corename* $mysaveme");
	
if( -e "$mysubmitnm" )
{
	system("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	system("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	system("cp $mysubmitnmlog $mycorenmlog");
}

CondorTest::KillPersonal($secconfig);
print scalar localtime() . "\n";

if($result != 0)
{
    # actual job failed but we allowed cleanup
    exit(1);
}

CondorTest::debug("lib_auth_protocol-gsi SUCCESS\n",1);
exit(0);

sub HaveAllReportedIn
{
	my $timeallowed = shift;
	my $config = shift;
	my $ret = 0;
	my %daemonpids = ();
	my $starttime = time;
	my $nowtime = time;
	my $timesince = $nowtime - $starttime;
	my $done = 0;

	$_ = $config;
	s/condor_config/log/;
	$config = $_;

	my @daemonlist = ();
	my $daemoncnt = 0;


	my $daemons = `condor_config_val daemon_list`;
	CondorUtils::fullchomp($daemons);
	@daemonlist = split /,/, $daemons;
	$daemoncnt = @daemonlist;

	print "We have $daemoncnt daemons including the master:$daemons\n";

	foreach my $daemonitem (@daemonlist) {
		#print "$daemonitem\n";
	}

	#print "Log directory here:$config\n";
	my $allup = 1;
	
	my $masterlog = $config . "/MasterLog";

	while(($done == 0) && ($timesince < $timeallowed)) {
		$allup = 1;
		%daemonpids = ();
		$nowtime = time;
		$timesince = $nowtime - $starttime;
		print "Start:$starttime Now:$nowtime Duration:$timesince\n";
		open(ML,"<$masterlog") or die "Can not open: $masterlog:$!\n";
		my $line = "";
		while (<ML>) {
			CondorUtils::fullchomp($_);
			$line = $_;
			if($line =~ /^.*?Started DaemonCore process.*?condor_(\w+).*?pid and pgroup\s=\s(\d+).*$/) {
				print "Consider: $line Pid:$2 Daemon:$1\n";
				if(!(exists $daemonpids{$1})) {
					$daemonpids{$1} = $2;
					print "adding $1:$2\n";
				} else {
					# if this pid is different then the first one daemons
					# are having issues. Fail test.
					if($daemonpids{$1} ne $2) {
						print "Saw multiple pid for: $1 Failing test\n";
						$allup = 0;
						last;
					}
				}
			} else {
			}
		}

		if($allup == 0) {
			$done = 0;
			last;
		}

		foreach my $daemon (sort keys %daemonpids) {
			print "$daemon:$daemonpids{$daemon}\n";
		}

		foreach my $daemonitem (@daemonlist) {
			next if($daemonitem eq "master");
			if(exists $daemonpids{$daemonitem}) {
				my $res = ValidatePid($daemonitem,$daemonpids{$daemonitem});
				if($res == 1) {
					print "$daemonitem is up\n";
				} else {
					print "Failed to find:$daemonitem\n";
					$allup = 0;
				}
			}
		}
		if($allup == 1) {
			$done = 1;
		} else {
			sleep 2;
			#print "Looping **************************************************\n";
		}
	}
	if($done == 1) {
		print "All daemons are up";
	} else {
		$ret = 1;
		print "All daemons are NOT up";
		my $argsforlogs = "";
		foreach my $daemonitem (@daemonlist) {
			next if($daemonitem eq "master");
			$argsforlogs = $argsforlogs . "$daemonitem,AUTHENTICATE ";
		}
		$argsforlogs = $argsforlogs . "master,D_SECURITY master,globus master,AUTHENTICATE";
		HarvestLogs($config, $argsforlogs);
	}
	print " - used $timesince of $timeallowed\n"; 
	return($ret);
}
		#$argsforlogs = $argsforlogs . "$daemonitem,AUTHENTICATE "
		#$argsforlogs = $argsforlogs . "master,D_SECURITY"
		#HarvestLogs($argsforlogs);

sub HarvestLogs
{
	my $logloc = shift;
	my $logrequests = shift;

	my %daemon_logs =
	(
    	"COLLECTOR" => "CollectorLog",
    	"NEGOTIATOR" => "NegotiatorLog",
    	"MASTER" => "MasterLog",
    	"STARTD" => "StartLog",
    	"SCHEDD" => "SchedLog",
    	"collector" => "CollectorLog",
    	"negotiator" => "NegotiatorLog",
    	"master" => "MasterLog",
    	"startd" => "StartLog",
    	"schedd" => "SchedLog",
	);
	
	@requests = split /\s/, $logrequests;

	foreach my $request (@requests) {
		my @requestparts = split /,/, $request;
		my $logfile = $logloc . "/";
		if(exists $daemon_logs{$requestparts[0]}) {
			$logfile = $logfile . "$daemon_logs{$requestparts[0]}";
			open(DL,"<$logfile") or print "Failed to open:$logfile :$!\n";
			my $ucdaemon = uc($daemon_logs{$requestparts[0]});
			print "\n\n##### $ucdaemon ##### search:$requestparts[1] file:$logfile \n\n";
			my $line = "";
			while (<DL>) {
				CondorUtils::fullchomp($_);
				$line = $_;
				if($line =~ /$requestparts[1]/) {
					print "$line\n";
				}
			}
			print "\n";
			close(DL);
		} else {
			print "Can not respond to $request because I can not find log file mapping\n";
		}
	}
}

sub ValidatePid
{
	my $daemonnm = shift;
	my $possiblepid = shift;
	#print "ValidatePid($daemonnm:$possiblepid)\n";
	if(CondorUtils::is_windows() == 1) {
		#print "Windows validate pid\n";
    	my @grift = `tasklist | grep $possiblepid`;
		foreach my $process (@grift) {
			#print "consider:$process saved pid: $savepid\n";
			if($process =~ /(.*?)\s+(\d+)\s+(\w+).*/) {
				$processstring = $1;
				if($2 eq $possiblepid) {
					#print "Pids equal:$processstring\n";
					# does this process have master in binary
				}
				if($processstring =~ /$daemonnm/) {
					return(1);
				}
			}
		}
		return(0);
	} else {
		print "Linux validate pid\n";
		my @psdata = `ps $possiblepid`;
		system("ps $possiblepid");
		my $pssize = @psdata;
		print "ps data on $possiblepid: $psdata[1]\n";
		if($pssize >= 2) {
			# parse results
			if($psdata[1] =~ /^\s*(\d+).*?condor_(\w+).*$/) {
				print "Binary is $2 for pid $1\n";
				if($2 =~ /$daemonnm/) {
					print "Daemon name matches, return GOOD\n";
					return(1);
				} else {
					print "Daemon name matches not\n";
					return(0);
				}
			} else {
				print "Bad pid parse:$psdata[1]\n";
				return(0);
			}
		} else {
			print "No pid data gotten\n";
			return(0);
		}
		print "ValidatePid should never get here\n";
		return(0);
	}
}
