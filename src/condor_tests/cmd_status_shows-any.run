#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;
use CondorCmdStatusWorker2;
use strict;
use warnings;


# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

my $testdesc =  'cmd_status_shows-any';
my $testname = "cmd_status_shows-any";
my $corename = "cmd_status_shows-any";
my $debuglevel = 2;

my @adarray;

print scalar localtime() . "\n";

my $mypid = $$;
my $mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

my $mysubmitnm = $corename . $mypid . ".cmd";
my $mysubmitnmlog = $corename . $mypid . ".log";
my $mysubmitnmout = $corename . $mypid . ".out";
my $mycorenm = $corename . ".cmd";
my $mycorenmout = $corename . ".cmd.out";
my $mycorenmlog = $corename . ".log";
my $done = 1;

CondorTest::debug("Master PID is $mypid\n",$debuglevel);
CondorTest::debug("Master PID submit file is $mysubmitnm\n",$debuglevel);

my $outsource = CondorCmdStatusWorker2::SetUp("cmd_status_shows-any");
CondorUtils::fullchomp($outsource);

if($outsource eq "") {
    # assume all cleanup of personals which did start occurred in worker
    print "OOOOPPPPSSSSSSSSSSSSyyyyy\n";
    exit(1);
}

( my $locconfig, my $scheddoneconfig) = split('&',$outsource);
CondorTest::debug("Two pools are $locconfig and $scheddoneconfig\n",$debuglevel);

my $stable = CondorCmdStatusWorker2::IsSystemStable();

my $numany = 0;
my %discoveries = ();
my @expectations = ("Submitter", "Negotiator", "DaemonMaster", "Scheduler", "Machine");

if($stable == 1) {
	print "Looking for 5 Ad types - ";
	# process one of each ad type and then compare with expected list
	my $cmd = "condor_status -any -format \"%s:\" MyType -format \"%s\n\" Name";
	CondorTest::debug("Looking at -any($cmd)\n",$debuglevel);
	my $cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
    if(!$cmdstatus)
    {
        CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",$debuglevel);
		CondorTest::KillPersonal($locconfig);
		CondorTest::KillPersonal($scheddoneconfig);
        exit(1)
    }
	
	foreach my $line (@adarray) {
		CondorTest::debug("-any: $line\n",$debuglevel);
		if( $line =~ /^(\w+):(.*)$/ ) {
			if( !(exists $discoveries{$1})) {
				print "Adding ($1/$2) to hash\n";
				$discoveries{$1} = $2;
			} else {
				print "($1) already found....\n";
			}
		}
	}

	foreach my $search (@expectations) {
		# it had best be in the hash!
		if(! (exists $discoveries{$search})) {
			print "bad\n";
			$done = 0;
			print "Expected ad type \"$search\" not discovered(Failure of Test)\n";
			last;
		} else {
			print "Expected Ad Type ($search) found!\n";
		}
	}
	if($done == 1) {
		print "ok\n";
	}
}


CondorTest::debug("Saving things and cleaning up....\n",$debuglevel);

#fails due to finding the directory of same name...
runcmd("cp *cmd_status_shows-any* $mysaveme", {expect_result=>\&ANY});

if( -e "$mysubmitnm" )
{
	runcmd("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	runcmd("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	runcmd("cp $mysubmitnmlog $mycorenmlog");
}

CondorTest::KillPersonal($locconfig);
CondorTest::KillPersonal($scheddoneconfig);
print scalar localtime() . "\n";

if( $done == 0 )
{
	# actual test failed but we allowed cleanup
	exit(1);
}

CondorTest::debug("cmd_q_shows-any SUCCESS\n",$debuglevel);
exit(0);
