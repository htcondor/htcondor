#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;
use Check::SimpleJob;
use Check::CondorLog;
use ConcurrencyTools;

my $testname = "job_concurrency_limitsP1.run";
my %children = ();
my $submitfile = "";
my $taskname = "";
my $idletolerance = 6;
my %taskmorejobs = (
	"undefinedcolon" => 1,
	"checkxsw" => 2,
	"checksmall" => 3,
	"checklarge" => 2,
);

ConcurrencyTools::InitLimits();

my $partitionable_condor_config = '
	DAEMON_LIST = MASTER,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD
	ALL_DEBUG = 
	NUM_CPUS = 12
	# slot type 1: a traditional cpu-centric policy
	SLOT_TYPE_1 = cpus=100%,memory=100%,disk=100%
	SLOT_TYPE_1_PARTITIONABLE = True
	NUM_SLOTS_TYPE_1 = 1
	XSW_LIMIT = 1
	CONCURRENCY_LIMIT_DEFAULT = 1
	CONCURRENCY_LIMIT_DEFAULT_SMALL = 1
	CONCURRENCY_LIMIT_DEFAULT_LARGE = 1
	NEGOTIATOR_INTERVAL = 2
';

CondorTest::StartCondorWithParams(
    append_condor_config => $partitionable_condor_config,
	local_fresh => "TRUE",
);

sub multi_timeout_callback
{
	print "LogCheck timeout expired!\n";
	CondorTest::RegisterResult( 0, test_name, $testname );
	my $time = scalar(localtime());
	die "Log check timed out at $time - ?\n";
};

Condor::SetAllowedEvents("RegisterEvictedWithoutCheckpoint,RegisterSubmit,RegisterExecute,RegisterAbort");

sub on_submit {
};

sub on_imageupdated {
};

my $result = 0;
my $waitforitres = 0;
my $queuesize = 0;

# enter most slots needed. We will verify
my $neededslots = 5;
my $haveslots = ConcurrencyTools::ExamineSlots($neededslots);

if($haveslots < $neededslots) {
    print "We need <$neededslots> but only have <$haveslots>\n";
    system("condor_config_val -dump | sort");
    system("condor_config_val -v NUM_CPUS");
    die "We need <$neededslots> but only have <$haveslots>\n";
}

my $on_match = sub {
	my $response = shift;
	if($response eq "HitRetryLimit") {
		print "About to fail from timeout!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
	}
};

sub SetIdleTolerance {
	my $tolerance = shift;
	$allow_too_few_idle_once = $tolerance;
	print "Tolerance of no idle set:$allow_too_few_idle_once\n";
};

$append_submit_commands = '
concurrency_limits = XSW
';

ConcurrencyTools::InitGlobals(0,0,6,0,1,2);

print "Test specified concurrency-XSW\n";

$taskname = "checkxsw";
$queuesize = 3;
$result = SimpleJob::RunCheck(
	test_name => $testname,
	no_wait => 1,
	queue_sz => $queuesize,
	duration => 0,
	timeout => 600,
	append_submit_commands => $append_submit_commands
);

$waitforitres = ConcurrencyTools::WaitForIt();
print "Test specified concurrency-XSW\n";
if($waitforitres == 1) {
	print "ok\n\n";
	RegisterResult(1,"test_name",$testname);
} else {
	print "bad\n\n";
	RegisterResult(0,"test_name",$testname);
}

$taskname = "";

# clean queue bwtween all checks
@RES = `condor_rm -all`;
sleep(2);

$append_submit_commands = '
concurrency_limits = UNDEFINED:2
';

ConcurrencyTools::InitGlobals(0,0,6,0,0,2);

print "Test default concurrency and colon usage spec\n";
$taskname = "undefinedcolon";
$queuesize = 2;
$result = SimpleJob::RunCheck(
	test_name => $testname,
	no_wait => 1,
	queue_sz => $queuesize,
	duration => 0,
	timeout => 600,
	append_submit_commands => $append_submit_commands
);
$taskname = "";;
$waitforitres = ConcurrencyTools::WaitForIt();
print "Test default concurrency and colon usage spec\n";
if($waitforitres == 1) {
	print "ok\n\n";
	RegisterResult(1,"test_name",$testname);
} else {
	print "bad\n\n";
	RegisterResult(0,"test_name",$testname);
}

# clean queue bwtween all checks
@RES = `condor_rm -all`;
sleep(2);

$append_submit_commands = '
concurrency_limits = large.license
';

ConcurrencyTools::InitGlobals(0,0,6,0,1,2);

print "Test class default: large.license\n";
$taskname = "checklarge";
$queuesize = 3;
$result = SimpleJob::RunCheck(
	test_name => $testname,
	no_wait => 1,
	queue_sz => $queuesize,
	duration => 0,
	timeout => 600,
	append_submit_commands => $append_submit_commands
);
$waitforitres = ConcurrencyTools::WaitForIt();
print "Test class default: large.license\n";
if($waitforitres == 1) {
	print "ok\n\n";
	RegisterResult(1,"test_name",$testname);
} else {
	print "bad\n\n";
	RegisterResult(0,"test_name",$testname);
}

# clean queue bwtween all checks
@RES = `condor_rm -all`;
sleep(2);

$append_submit_commands = '
concurrency_limits = small.license
';

ConcurrencyTools::InitGlobals(0,0,6,0,1,3);

print "Test class default: small.license\n";
$taskname = "checksmall";
$queuesize = 4;
$result = SimpleJob::RunCheck(
	test_name => $testname,
	no_wait => 1,
	queue_sz => $queuesize,
	return_submit_file_name => $on_submitnameknown,
	duration => 0,
	timeout => 600,
	append_submit_commands => $append_submit_commands
);

$waitforitres = ConcurrencyTools::WaitForIt();
print "Test class default: small.license\n";
if($waitforitres == 1) {
	print "ok\n\n";
	RegisterResult(1,"test_name",$testname);
} else {
	print "bad\n\n";
	RegisterResult(0,"test_name",$testname);
}

EndTest();
exit(0);
