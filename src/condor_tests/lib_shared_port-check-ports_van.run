#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use Check::CondorLog;

$execute = sub {
	# use netstat to find open ports
	my $netstat_result = `netstat -tlpn | grep condor`;

	# allow netstat to fail as some nmi platforms (macos_10.4) don't support it
	if(length($netstat_result) == 0) {
		CondorTest::debug("Warning: 'netstat -tlpn | grep condor' failed, skipping tcp port checks\n");
		return;
	}
	CondorTest::debug("netstat -tlpn | grep condor\n$netstat_result\n", 1);
	my @lines = split /\n/, $netstat_result;

	# get the log directory for this test
	my $logdir = `condor_config_val log`;
	$logdir =~ s/\012+$//;
	$logdir =~ s/\015+$//;

	# get the pids associated with this personal condor
	my $pid = $logdir . "/PIDS";
	open(PID_FILE, "<$pid") || die "Can't open pid file $pid.";

	# get just the pid from each line in file
	my @pid_file_contents = <PID_FILE>;
	my @pids;
	foreach(@pid_file_contents) {
		chomp;
		my @temp = split(/[\ \n]/, $_);
		push(@pids, @temp[0]);
	}

	# get the pid for the shadow
    my $shadow_log_location = `condor_config_val SHADOW_log`;
	open(SHADOW_LOG, "<$shadow_log_location") || die "Can't open shadow log ($shadow_log_location).";

	my @shadow_log_contents = <SHADOW_LOG>;
	foreach(@shadow_log_contents) {
		chomp;
		# get line with shadow's pid
		if(index($_, "PID = ", 0) != -1) {
			my $r = rindex($_, " ");
			my $shadow_pid = substr($_, $r+1);
			push(@pids, $shadow_pid);
			last;
		}
	}

	CondorTest::debug("pids - @pids\n", 1);

	# check that only schedd, collector, shared_port have open listening tcp ports
	my $match;
	my $found_listening_daemon = 0;
	my $unexpected_listening_daemon = 1;
	foreach my $line (@lines) {
		$match = 0;
		my $foundpid = 0;
		# find target pid
		if($line =~ /^.*?LISTEN\s+(\d+)\/.*$/) {
			$foundpid = $1;
		}
		# go through all the pids
		for($i = 0; $i < @pids && $match == 0; $i++) {
			# check if this is a daemon we care about
			
			if("$foundpid" eq "@pids[$i]") {
				print "Found an expected daemon\n";
			#if(index($_, @pids[$i] . '/', 0) != -1) {
				$match = 1;
				if(index($line, "condor_sch", 0) == -1 &&
					index($line, "condor_shar", 0) == -1 &&
					index($line, "condor_coll", 0) == -1)
				{
					$unexpected_listening_daemon = 0;
					CondorTest::debug("Error: unexpected daemon has open listening tcp port ($line)\n", 1);
				}
				else
				{
					$found_listening_daemon = 1;
				}
			}
		}
	}

   	CondorTest::RegisterResult( $found_listening_daemon,
		(check_name => "Found expected daemon with open listening tcp port",
		test_name => "lib_shared_port-check-ports_van") );
	CondorTest::RegisterResult( $unexpected_listening_daemon, 
		(check_name => "No unexpected daemons with open listening tcp ports",
		test_name => "lib_shared_port-check-ports_van") );
};

$success = sub {
	# verify connection requests made via shared port server for each daemon
	CondorLog::RunCheck(
		daemon => "SHARED_PORT",
		match_regexp => "SharedPortServer: request from COLLECTOR"
	);
	CondorLog::RunCheck(
		daemon => "SHARED_PORT",
		match_regexp => "SharedPortServer: request from SCHEDD"
	);
	CondorLog::RunCheck(
		daemon => "SHARED_PORT",
		match_regexp => "SharedPortServer: request from NEGOTIATOR"
	);
	CondorLog::RunCheck(
		daemon => "SHARED_PORT",
		match_regexp => "SharedPortServer: request from STARTD"
	);

	CondorTest::EndTest();
};

my $append_condor_config = '
  USE_SHARED_PORT = True
  DAEMON_LIST = MASTER,SHARED_PORT,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD

  SHARED_PORT_DEBUG = D_COMMAND D_FULLDEBUG

  # named sockets cannot have very long paths (~100 chars), so put them
  # in /tmp to avoid problems
  DAEMON_SOCKET_DIR = /tmp/$(USERNAME)-condor-test-sock
';

CondorTest::StartCondorWithParams(
    append_condor_config => $append_condor_config
);

my $testname = "lib_shared_port-check-ports_van";
CondorTest::RegisterExecute($testname, $execute);
CondorTest::RegisterExitedSuccess ($testname, $success);

my $logfile = "$testname.log";
unlink($logfile);

# submit file
my $submit_fname = CondorTest::TempFileName("$testname.submit");
open( SUBMIT, ">$submit_fname" ) || die "error writing to $submit_fname: $!\n";
print SUBMIT <<END;
universe = vanilla
executable = x_sleep.pl
log = $logfile
arguments = 10
notification = never
queue
END
close( SUBMIT );

# run test
if( CondorTest::RunTest($testname, $submit_fname, 0) ) {
    CondorTest::debug("$testname: SUCCESS\n",1);
    exit(0);
} else {
    die "$testname: CondorTest::RunTest() failed\n";
}

