#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2012, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;


my $testname = "job_partitionable_basic_van";
my $test_passed = 0;


sub timed_callback {
    my %args = @_;
    my $cluster = $args{"cluster"};
	my @resarray = ();

    my $stat = runCondorTool("condor_status -format \"%s\" \'ifThenElse(PartitionableSlot =?= TRUE, \"P\", ifThenElse(DynamicSlot =?= TRUE, \"D\", \"S\"))' -format \" %s\" State -format \" %s\" Activity -format \" %s\n\" Cpus",\@resarray,2);

    my $expected_pslots = 0;
    my $expected_dslots = 0;
    my $unexpected = 0;

    my @slines = split /\n/, $stat;
    foreach my $line (@resarray) {
		chomp($line);
        my @f = split ' ', $line;
        if ($f[0]=="P"  &&  $f[1]=="Unclaimed"  &&  $f[2]=="Idle"  &&  $f[3]=="2") {
            $expected_pslots += 1;
        } elsif ($f[0]=="D"  &&  $f[1]=="Claimed"  &&  $f[2]=="Busy"  &&  $f[3]=="1") {
            $expected_dslots += 1;
        } else {
            $unexpected += 1;
        }
    }

    # I'm looking for this slot pattern to show up if things are working correctly:
    # 5 partitionable slots unclaimed/idle with 2 slots left
    # 10 dynamic slots claimed/busy with 1 slot
    # and there should be no other slots
	print "expected_pslots(5) <$expected_pslots> expected_dslots(10) <$expected_dslots> unexpected(0) <$unexpected>\n";
    if ($expected_pslots==5  &&  $expected_dslots==10  &&  $unexpected==0) {
        $test_passed = 1;
		print "SUCCESS!  Saw the correct breakdown of slots.\n";
		print "Will now condor_rm job.\n";

        # Remove this or it might run again, which will cause a failure the second time condor_rm runs
        CondorTest::RemoveTimed($testname);

		# Now remove 
		my @adarray;
		my $cmd = "condor_rm $cluster";
		my $status = runToolNTimes($cmd,1);
		if(!$status) {
	    	print "bad\n";
	    	CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n", 1);
	    	exit(1)
		}
    } else {
		print "Haven't seen expected condor_status output (yet).  What I saw was...\n";
		print $stat;
		print "condor_status shows\n";
		runToolNTimes("condor_status",1);
		# Timed call backs only fire once now.
		CondorTest::debug("Registering another callback to recheck in 15 seconds\n",1);
		CondorTest::RegisterTimed($testname, \&timed_callback, 15);
    }
}


sub exit_success_callback {
    # by this time we had better have seen the slot pattern we were looking for
    unless ($test_passed) {
        die "Failed to find expected pattern of partitionable and dynamic slots";
    }
}

my $abort = sub {
    # We will hit this if we condor_rm the job, which we do after seeing the correct pattern.
    if($test_passed) {
	CondorTest::debug("Job successfully condor_rm'ed after seeing correct pattern.\n", 1);
    }
    else {
	die "Job aborted, but \$test_passed is not True\n";
    }
};

# personal condor, with 5 partitionable slots, 4 cpus each (total 20 cpus)
# set the negotiator interval down to so test runs faster.
# also set CLAIM_PARTITIONABLE_LEFTOVERS to false - with it
# set to true (which is the default), there is no guarantee that
# the dynamic slots will be evenly divided across the partitionable
# slots like this test expects.
my $append_condor_config = "
DAEMON_LIST = MASTER,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD
NEGOTIATOR_INTERVAL = 20
NUM_CPUS = 20
SLOT_TYPE_1 = cpus=4
SLOT_TYPE_1_PARTITIONABLE = TRUE
NUM_SLOTS_TYPE_1 = 5
CLAIM_PARTITIONABLE_LEFTOVERS = false
";

CondorTest::StartCondorWithParams(
    append_condor_config => $append_condor_config
);


my $job_log = "$testname.log";
unlink $job_log;

# submit 10 jobs
my $submit_body = "
universe = vanilla
executable = x_sleep.pl
log = $job_log
output = $testname.out
error = $testname.err
notification = never
request_memory = 1
arguments = 60
queue 10
";

my $submit_filename = CondorTest::TempFileName("$testname.submit");
open(SUBMIT, ">$submit_filename") || die "Failed to open $submit_filename\n";
print SUBMIT $submit_body;
close(SUBMIT);

my $on_evictedwithoutcheckpoint = sub {
	CondorTest::debug("Evicted Without Checkpoint from removing jobs.\n",1);
};
CondorTest::RegisterEvictedWithoutCheckpoint($testname, $on_evictedwithoutcheckpoint);

CondorTest::RegisterTimed($testname, \&timed_callback, 15);
CondorTest::RegisterExitedSuccess($testname, \&exit_success_callback);
CondorTest::RegisterAbort($testname, $abort);

if (CondorTest::RunTest($testname, $submit_filename, 0)) {
    CondorTest::debug("$testname: SUCCESS\n",1);
    exit(0);
}
else {
    die "$testname: CondorTest::RunTest() failed\n";
}
