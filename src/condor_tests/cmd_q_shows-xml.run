#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use Check::SimpleJob;
use CondorUtils;
use strict;
use warnings;

my $testname = "cmd_q_shows-xml";
my $debuglevel = 2;
my $worked = 0;

my $ClusterId = 0;

my $GetClusterId = sub {
	my $cid = shift;
	$ClusterId = $cid;
	print "Resquestd Cluster Got $ClusterId\n";
	##########################
	#
	# Convoluted: This function is paased to RunCheck which uses it in RunTest in the fourth
	# position which is always an undefined variable EXCEPT when it is a call back routine 
	# to pass out the cluster Id.
	#
	##########################
	#runcmd("condor_q",{emit_output => 1});
};


my @adarray;

my $submit = sub {
	my $cmd = "condor_q -xml ";

	print "ok\n";
	print "Get XML output via $cmd - ";
	my $cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
	if(!$cmdstatus)
	{
		print "bad\n";
		CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",$debuglevel);
		exit(1)
	}
	print "ok\n";

	my $submitline = "";
	my $cluster = $ClusterId;

	$cmd = "condor_rm $cluster";

	print "Check for valid XML output - ";
	foreach my $line (@adarray) {
		chomp($line);
		if($line =~ /^\s*$/) {
				#print "Blank Line\n";
		} elsif($line =~ /^\s*<.*$/) {
				CondorTest::debug("XML<<	$line	>>\n",$debuglevel);
				$worked += 1;
		} elsif($line =~ /^.*Submitter:.*$/) {
				#print "Submit line\n";
		} else {
			print "bad\n";
			CondorTest::debug("Lines must be blank or start with <\n",$debuglevel);
			CondorTest::debug("<<<$line>>>\n",$debuglevel);
			exit(1)
		}
	}
	if($worked > 0) {
		print "ok\n";
	} else {
		print "bad\n";
	}

	$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,8,{expect_result => ANY,emit_output=>0});
};

my $aborted = sub {
};

my $ExitSuccess = sub {
};

my $timed = sub
{
    die "Job should have ended by now. condor_q -xml broken!\n";
};

print "Start a long runniing job - ";

my $runresult = SimpleJob::RunCheck(
	duration => 0,
	on_abort => $aborted,
	on_submit => $submit,
	on_success => $ExitSuccess,
	GetClusterId => $GetClusterId,
);


