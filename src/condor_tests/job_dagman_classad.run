#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

# This test tests the DAGMan classad status update capability.

use CondorTest;
use CondorUtils;

$cmd = 'job_dagman_classad.dag';
$testdesc =  'Condor submit dag - classad status update test - scheduler U';
$testname = "job_dagman_classad";
$dagman_args = "-verbose";

@outfiles = ("job_dagman_classad-nodeNodeA.out",
	"job_dagman_classad-nodeNodeB.out",
	"job_dagman_classad-nodeNodeC.out");

@lines0 = ("DAG_InRecovery = 0",
	"DAG_NodesDone = 0",
	"DAG_NodesFailed = 0",
	"DAG_NodesPostrun = 0",
	"DAG_NodesPrerun = 0",
	"DAG_NodesQueued = 1",
	"DAG_NodesReady = 0",
	"DAG_NodesTotal = 3",
	"DAG_NodesUnready = 2",
	"DAG_Status = 0",
	"Node NodeA succeeded");

@lines1 = ("DAG_InRecovery = 0",
	"DAG_NodesDone = 1",
	"DAG_NodesFailed = 0",
	"DAG_NodesPostrun = 0",
	"DAG_NodesPrerun = 0",
	"DAG_NodesQueued = 1",
	"DAG_NodesReady = 0",
	"DAG_NodesTotal = 3",
	"DAG_NodesUnready = 1",
	"DAG_Status = 0",
	"Node NodeB succeeded");

@lines2 = ("DAG_InRecovery = 0",
	"DAG_NodesDone = 2",
	"DAG_NodesFailed = 0",
	"DAG_NodesPostrun = 0",
	"DAG_NodesPrerun = 0",
	"DAG_NodesQueued = 1",
	"DAG_NodesReady = 0",
	"DAG_NodesTotal = 3",
	"DAG_NodesUnready = 0",
	"DAG_Status = 0",
	"Node NodeC succeeded");

@all_lines = (\@lines0, \@lines1, \@lines2);

my $killedchosen = 0;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

# Get rid of any existing output files.
foreach $file (@outfiles) {
	if (-e $file) {
		runcmd("rm -f $file");
	}
}

$abnormal = sub 
{
	die "Want to see only submit, execute and successful completion\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	my %info = @_;

	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
};

$submitted = sub
{
	CondorTest::debug("submitted: This test will see submit, executing and successful completion\n",1);
};

$success = sub
{
	CondorTest::debug("executed successfully\n",1);
	CondorTest::debug("Verifying output\n",1);
	$diditpass = 1;

#	$index = 0;
#	foreach $file (@outfiles) {
#		$canopen = open(OUT,"<$file");
#		if (! (defined $canopen)) {
#			CondorTest::debug("Can not open logfile<$file>:$!\n",1);
#			$diditpass = 0;
#		} else {
#			$contents = do { local $/; <OUT>; };

#			$lines = shift @all_lines;
#			foreach $line (@$lines) {
#				if ($contents =~ /$line/ ) {
#					CondorTest::debug("$file: $line\n",1);
#				} else {
#					CondorTest::debug("ERROR: $line not found in $file\n",1);
#					$diditpass = 0;
#				}
#			}
#		}
#		close(OUT);
#		$index++;
#	}

#	if($diditpass == 0) {
#		die "All expected files and correct output failed\n";
#	}
};

CondorTest::RegisterExitedSuccess( $testname, $success );
CondorTest::RegisterExecute($testname, $executed );
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

