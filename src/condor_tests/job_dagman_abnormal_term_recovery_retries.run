#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

## This tests recovery mode on a node with retries that terminated
## abnormally (see gittrac #744).

use CondorTest;
use CondorUtils;

$cmd = 'job_dagman_abnormal_term_recovery_retries.dag';
$testdesc =  'Condor submit dag - abnormal termination-recovery-retries test - scheduler U';
$testname = "job_dagman_abnormal_term_recovery_retries";
# Force DAGMan to run in recovery mode (so we'll read the log file we
# copy below).
$dagman_args = "-verbose -DoRecov";

@logfiles = ("job_dagman_abnormal_term_recovery_retries.dag.dagman.out");

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

# Get rid of any existing log files.
foreach $name (@logfiles) {
	if (-e $name) {
		runcmd("rm -f $name");
	}
}

# Copy in dummy log with signal 11 abnormal termination for node A.
runcmd("cp job_dagman_abnormal_term_recovery_retries-nodeA.dummy_log job_dagman_abnormal_term_recovery_retries-nodeA.log");
runcmd("cp job_dagman_abnormal_term_recovery_retries-nodeA.dummy_log job_dagman_abnormal_term_recovery_retries.dag.nodes.log");

$abnormal = sub 
{
	die "Want to see only submit, execute and successful completion\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	my %info = @_;

	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
};

$submitted = sub
{
	CondorTest::debug("submitted: This test will see submit, executing, held, released, and successful completion\n",1);
};

$success = sub
{
	CondorTest::debug("executed successfully\n",1);
	CondorTest::debug("Verifying output\n",1);
	$diditpass = 1;

	foreach $name (@logfiles) {
		$line = "";
		$dag_state = 0;
		$passed = 0;
		$canopen = open(OUT,"<$name");
		if( ! (defined $canopen)) {
			CondorTest::debug("Can not open logfile<$name>:$!\n",1);
			$diditpass = 0;
		}
		while(<OUT>) {
			chomp();
			$line = $_;

			if( $line =~ /Event: ULOG_SUBMIT for Condor Node A/ ) {
				CondorTest::debug("$name: $line\n",1);
				if( $dag_state == 0 or $dag_state == 2) {
					$dag_state++;
				} else {
					CondorTest::debug("Got Bubmit event for Node A in " .
								"wrong sequence\n");
				}

			} elsif( $line =~
						/Node A job proc \(*\d\.0\.0\) failed with signal 11/ ) {
				CondorTest::debug("$name: $line\n",1);
				if( $dag_state == 1) {
					$dag_state++;
				}

#TEMP -- add a check for the "...Looking for retry of node A..." line?
			} elsif( $line =~ /Event: ULOG_JOB_TERMINATED for Condor Node A/ ) {
				CondorTest::debug("$name: $line\n",1);
				if( $dag_state == 3) {
					$dag_state++;
				}

			} elsif( $line =~ /EXITING WITH STATUS 0/ ) {
				CondorTest::debug("$name: $line\n",1);
				if( $dag_state == 4 ) {
					$passed = 1;
				} else {
					CondorTest::debug("Got EXITING line in wrong sequence\n");
				}
			}
		}
		close(OUT);
		if($passed == 1 ) {
			;
		} else {
			CondorTest::debug("failed $name: $line\n",1);
			$diditpass = 0;
		}
	}

	if($diditpass == 0) {
		die "All expected files and correct output failed\n";
	}
};

CondorTest::RegisterExitedSuccess( $testname, $success);
CondorTest::RegisterExecute($testname, $executed);
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunDagTest() failed\n";
}

