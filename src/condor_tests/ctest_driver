#!/usr/bin/python2

import os
import shutil
import errno
import argparse


base_config_template = """
RELEASE_DIR={prefix_path}
# This is overwritten by CondorPersonal.pm
LOCAL_CONFIG_FILE=/
COLLECTOR_HOST=$(FULL_HOSTNAME):0
ALLOW_READ=*
ALLOW_WRITE=*
ALLOW_ADMINISTRATOR=*
ALLOW_DAEMON=*
ALLOW_NEGOTIATOR=*
NEGOTIATOR_CYCLE_DELAY=1
NEGOTIATOR_INTERVAL=1
SCHEDD_INTERVAL=1
SCHEDD_MIN_INTERVAL=1
SCHEDD_DEBUG=D_FULLDEBUG
RUNBENCHMARKS=false
FILETRANSFER_PLUGINS=
LOCAL_CONFIG_FILE={pwd}/condor_config.local
# ctest allows tests to run for up to 1500 seconds; after that, we are
# potentially a runaway personal condor instance.
DAEMON_SHUTDOWN=time() - DaemonStartTime > 1500
LOCAL_DIR={pwd}/local_dir
{extra_args}
"""


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--test", help="Name of HTCondor test")
    parser.add_argument("--working-dir", help="Name of top-level CMake binary directory",
        default=".", dest="working_dir")
    parser.add_argument("--source-dir", help="Name of top-level HTCondor source directory",
        default=".", dest="source_dir")
    parser.add_argument("--prefix-path", help="Location of the install prefix to test",
        default=".", dest="prefix_path")
    parser.add_argument("--dependencies", help="Source file dependencies")
    parser.add_argument("--java", help="Enable Java universe", dest="java", action="store_true",
        default=False)

    return parser.parse_args()


def write_base_config(prefix_path, java=False):
    extra_args = ''
    if not java:
        extra_args += "JAVA="
    with open("condor_config.local", "w") as fp:
        pass
    os.makedirs("local_dir")
    pwd = os.getcwd()
    with open("base_config", "w") as fp:
        fp.write(base_config_template.format(pwd=pwd, prefix_path=prefix_path, extra_args=extra_args))

def main():
    args = parse_args()

    rundir = os.path.join(args.working_dir, "src", "condor_tests", args.test + "_ctest")
    try:
        os.makedirs(rundir)
    except OSError as oe:
        if oe.errno != errno.EEXIST:
            raise
        shutil.rmtree(rundir)
        os.makedirs(rundir)
    os.chdir(rundir)

    src_fname = os.path.join(args.source_dir, "src", "condor_tests", args.test + ".run")
    dst_fname = os.path.join(rundir, args.test + ".run")
    shutil.copy(src_fname, dst_fname)

    for src_fname in args.dependencies.split(";"):
        if not src_fname: continue
        fname = os.path.split(src_fname)[1]
        dst_fname = os.path.join(rundir, fname)
        src_fname = os.path.join(args.source_dir, src_fname)
        if os.path.isdir(src_fname):
            shutil.copytree(src_fname, dst_fname)
        else:
            shutil.copy(src_fname, dst_fname)

    os.environ['PERL5LIB'] = '..'
    new_library_path = os.path.join(args.prefix_path, "lib")
    if 'LD_LIBRARY_PATH' in os.environ:
        os.environ['LD_LIBRARY_PATH'] = new_library_path + ':' + os.environ['LD_LIBRARY_PATH']
    else:
        os.environ['LD_LIBRARY_PATH'] = new_library_path
    os.environ['PATH'] = ":".join([os.path.join(args.prefix_path, "bin"), "/bin", "/sbin", "/usr/sbin", "/usr/bin"])

    write_base_config(args.prefix_path, java=args.java)
    # This is not re-generated each time.    
    if os.path.exists("derived_condor_config"):
        os.unlink("derived_condor_config")

    os.environ['CONDOR_CONFIG'] = 'base_config'

    os.execv("/usr/bin/perl", ["run_test.pl", os.path.join("..", "run_test.pl"), args.test])

if __name__ == "__main__":
    main()

