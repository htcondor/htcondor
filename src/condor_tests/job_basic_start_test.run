#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;
use Check::SimpleJob;
#use Check::CondorLog;
use Check::ProcInfo;

my $configfile = "";
my $ClusterId = 0;
my $testname =  "job_basic_start_test";


my $firstappend_condor_config = '
	DAEMON_LIST = MASTER,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD
	NUM_CPUS = 5
	SLOT1_CPU_AFFINITY = 0
	SLOT2_CPU_AFFINITY = 1
	SLOT3_CPU_AFFINITY = 2
	SLOT4_CPU_AFFINITY = 3
	SLOT5_CPU_AFFINITY = 4
	SLOT5_IsGeneralPurposeSlot = False
	#START = ($(START)) \
		#&& ((TARGET.RequiresTypeB =?= TRUE && MY.SlotID == 5) \
	START =  ((TARGET.RequiresTypeB =?= TRUE && MY.SlotID == 5) \
		  || (TARGET.RequiresTypeB =!= TRUE && MY.SlotID != 5))
	ALL_DEBUG = 
';

$configfile = CondorTest::CreateLocalConfig($firstappend_condor_config,"name1");

my $condorinfo =CondorTest::StartCondorWithParams(
	condor_name => "name1",
	fresh_local => "TRUE",
	condorlocalsrc => "$configfile",
);

print "We know this about the just started personal condor <$condorinfo>\n";

my $sleepforever = '
	universe = vanilla
	executable = x_sleep.pl
	log = $sleepforeverlog
	notification = never
	arguments = 0
	queue
';

print "First test basic job\n";
SimpleJob::RunCheck();

print "Config file follows\n";
system("cat $configfile");

print "Starting sleep forever job\n";

my $sleepf1 = $$ . "sf1";
open(SF1,">$sleepf1") or die "Can not create <$sleepf1>\n";
print SF1 "$sleepforever";

system("cat $sleepf1");

print "Permanent sleep job started\n";
my $plain = 0;
$plain = SubmitReturnCluster($sleepf1);

my $sleepf2 = $$ . "sf2";
open(SF2,">$sleepf2") or die "Can not create <$sleepf2>\n";
print SF2 "+RequiresTypeB = True\n";
print SF2 "$sleepforever";

system("cat $sleepf2");
print "submitting RequiresTypeB job now\n";
my $special =  0;
$special = SubmitReturnCluster($sleepf2);

my $numberinstate = 0;
my $result = 0;
CondorTest::VerifyNoJobsInState("running",2,30);
system(" condor_q -run");

my @cmdout = `condor_q -run`;

my %jobs = ();
foreach my $line (@cmdout) {
	chomp($line);
	if($line =~ /^\s*(\d+)\.0.*\s+slot(\d+).*$/) {
		#print "Match <$line> job $1 slot$2\n";
		$jobs{$1} = $2;
	} else {
		#print "No match <$line>\n";
	}
}

# if this worked, spcial cluster should be 5 and the plain
# should be some number less.
if($jobs{$special} == 5){
	print "Special job $special running on dedicated slot $jobs{$special}\n";
} else {
	die "Special job $special NOT running on dedicated slot 5 <$jobs{$special}>\n";
}

if($jobs{$plain} < 5){
	print "Regular job $plain running on geneneral purpose slot $jobs{$plain}\n";
} else {
	die "Regular job $plain running on dedicated slot 5 <$jobs{$plain}>\n";
}
#CondorTest::RegisterResult(1,{test_name => $testname});

CondorTest::EndTest();


sub SubmitReturnCluster
{
	my $submitfile = shift;
	my $cluster = 0;

	my @output = `condor_submit $submitfile`;

	foreach my $line (@output) {
		chomp($line);
		if($line =~ /^.*cluster (\d+).*$/) {
			#print "$line\n";
			#print "returning $1\n";
			$cluster = $1;
			return($cluster);
		}
	}
	return(0);
}
